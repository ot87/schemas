{"version":3,"sources":["components/Common/Plate/Plate.module.css","components/Common/Card/Card.module.css","components/SchemaForm/SchemaForm.module.css","components/Header/Header.module.css","components/SchemaForm/SchemaFormItems/SchemaFormItems.module.css","components/Schema/Schema.module.css","components/SchemasBoard/SchemasBoard.module.css","components/SchemasList/SchemasList.module.css","components/SchemasPanel/SchemasPanel.module.css","components/Content/Content.module.css","components/Common/Item/Item.module.css","components/Common/FormField/FormField.module.css","components/SchemaForm/SchemaFormItemsControls/SchemaFormItemsControls.module.css","components/SchemaForm/SchemaFormButtons/SchemaFormButtons.module.css","components/Common/Plate/Plate.js","redux/reducers/ui.js","api/index.js","redux/reducers/schemas.js","components/SchemasList/SchemasListContainer.js","components/SchemasPanel/SchemasPanelContainer.js","components/Header/HeaderContainer.js","components/Common/Card/Card.js","components/Common/Card/CardWithButtons.js","components/Common/Item/Item.js","components/Schema/Schema.js","components/Common/FormField/FormField.js","components/SchemaForm/SchemaFormItemsControls/SchemaFormItemsControls.js","components/SchemaForm/SchemaFormItems/SchemaFormItems.js","components/SchemaForm/SchemaFormButtons/SchemaFormButtons.js","components/SchemaForm/SchemaFormContainer.js","components/SchemasBoard/SchemasBoardContainer.js","components/Content/ContentContainer.js","App.js","redux/reducers/index.js","index.js","redux/store/configureStore.js"],"names":["module","exports","Plate","text","colorTheme","isClicked","isToggled","isDisabled","onClick","plateCssObj","css","greenPlate","goldPlate","redPlate","plate","indexOf","disabledPlate","Object","assign","clickedPlate","toggledPlate","greenTheme","goldTheme","redTheme","role","className","cn","UiModes","selectSchema","id","type","payload","setMode","mode","ui","state","selectedSchemaId","action","API","key","init","this","saveData","data","localStorage","setItem","JSON","stringify","loadData","parse","getItem","schemas","addSchema","schema","length","push","Promise","resolve","updateSchema","updateId","findIndex","deleteSchema","filter","addSchemaSuccess","updateSchemaSuccess","deleteSchemaSuccess","selectSchemasForSchemasList","createSelector","map","name","getSchemasCount","connect","schemasList","schemasCount","isAdd","isEdit","isDelete","handleClick","newMode","editProps","deleteProps","schemasPanel","isSchemasClicked","setIsSchemasClicked","isShowSchema","header","headerList","headerPanel","stickyHeader","SchemasListContainer","SchemasPanelContainer","Card","content","cardCss","goldCard","redCard","card","clicked","cardName","cardContent","CardWithButtons","cardIsClicked","buttons","first","second","Item","children","item","Schema","description","items","itemsRow","quantity","time","FormField","tag","validate","disabled","placeholder","TagName","input","textarea","meta","fieldCss","error","touched","SchemaFormItemsControls","isRemoveClicked","showRemove","isRemoveAllClicked","addOnClick","removeOnClick","removeAllOnClick","schemaFormItemsControls","SchemaFormItems","initItems","onValidate","itemsIdsToRemove","handleRemoveOnItemsRowClick","initialValue","render","fields","index","rowCss","remove","clickedItemsRow","SchemaFormButtons","submit","reset","cancel","schemaButtons","SchemaFormContainer","onSubmit","onCancel","useState","setIsRemoveClicked","setItemsIdsToRemove","setIsRemoveAllClicked","required","value","initialValues","mutators","arrayMutators","handleSubmit","form","removeBatch","submitting","dirty","values","schemaForm","stickyWrapper","schemaBar","keys","newItemsIdsToRemove","concat","dispatch","a","response","schemasBoard","find","board","cardColorTheme","Content","SchemasBoardContainer","App","HeaderContainer","ContentContainer","reducer","combineReducers","store","preloadedState","middlewares","thunk","logger","storeEnhancers","applyMiddleware","composedEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","configureStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,0BAA0B,UAAY,yBAAyB,SAAW,wBAAwB,aAAe,4BAA4B,cAAgB,6BAA6B,aAAe,4BAA4B,WAAa,0BAA0B,UAAY,yBAAyB,SAAW,0B,uBCAxXD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uBAAuB,QAAU,sBAAsB,QAAU,sBAAsB,SAAW,uBAAuB,YAAc,4B,kBCA9LD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,cAAgB,kCAAkC,UAAY,8BAA8B,OAAS,6B,kBCAnKD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,aAAe,6BAA6B,WAAa,2BAA2B,YAAc,8B,iBCApJD,EAAOC,QAAU,CAAC,MAAQ,+BAA+B,SAAW,kCAAkC,OAAS,gCAAgC,gBAAkB,2C,mBCAjKD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,SAAW,2B,oBCA3FD,EAAOC,QAAU,CAAC,MAAQ,8B,mBCA1BD,EAAOC,QAAU,CAAC,YAAc,mC,gBCAhCD,EAAOC,QAAU,CAAC,aAAe,qC,gBCAjCD,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,KAAO,qB,iBCAzBD,EAAOC,QAAU,CAAC,MAAQ,2B,gBCA1BD,EAAOC,QAAU,CAAC,wBAA0B,2D,iBCA5CD,EAAOC,QAAU,CAAC,cAAgB,2C,iPCwDnBC,EAtCD,SAAC,GAOR,IAAD,EAWK,EAjBPC,EAME,EANFA,KACAC,EAKE,EALFA,WACAC,EAIE,EAJFA,UACAC,EAGE,EAHFA,UACAC,EAEE,EAFFA,WACAC,EACE,EADFA,QAEIC,GAAW,mBACVC,IAAIC,WAA4B,UAAfP,GADP,cAEVM,IAAIE,UAA2B,SAAfR,GAFN,cAGVM,IAAIG,SAA0B,QAAfT,GAHL,cAIVM,IAAII,OAA0D,IAAlD,CAAC,QAAS,OAAQ,OAAOC,QAAQX,IAJnC,GAOXG,GACAE,EAAYC,IAAIM,gBAAiB,EACjCR,EAAU,OAENH,IACAG,EAAU,MAEdS,OAAOC,OAAOT,GAAd,KAAAQ,OAAA,IAAAA,CAAA,EACKP,IAAIS,aAAed,GADxBY,OAAA,IAAAA,CAAA,EAEKP,IAAIU,cAAgBf,GAAaC,GAFtCW,OAAA,IAAAA,CAAA,EAGKP,IAAIW,WAAahB,GAA4B,UAAfD,GAHnCa,OAAA,IAAAA,CAAA,EAIKP,IAAIY,WAAajB,GAAaC,IAA6B,SAAfF,GAJjDa,OAAA,IAAAA,CAAA,EAKKP,IAAIa,UAAYlB,GAAaC,IAA6B,QAAfF,GALhD,KASJ,OACI,yBAAKoB,KAAK,SAASC,UAAWC,IAAGjB,GAAcD,QAASA,GACnDL,I,yBC5CAwB,EACH,OADGA,EAEJ,MAFIA,EAGH,OAHGA,EAID,SAoBCC,EAAe,SAACC,GAAD,MAAS,CAACC,KAhChB,mBAgCqCC,QAAS,CAACF,QAExDG,EAAU,SAACC,GAAD,MAAW,CAACH,KAhClB,cAgCkCC,QAAS,CAACE,UAE9CC,EArBJ,WAML,IALFC,EAKC,uDALO,CACJC,iBAAkB,KAClBH,KAAMN,GAEVU,EACC,uCACD,OAAQA,EAAOP,MACX,IAvBc,mBAwBV,OAAO,2BAAIK,GAAX,IAAkBC,iBAAkBC,EAAON,QAAQF,KACvD,IAvBS,cAwBL,OAAO,2BAAIM,GAAX,IAAkBF,KAAMI,EAAON,QAAQE,OAC3C,QACI,OAAOE,I,yCCeJG,EA3CH,CACRC,IAAK,KAELC,KAHQ,SAGHD,GACDE,KAAKF,IAAMA,GAEfG,SANQ,SAMCC,GACLC,aAAaC,QAAQJ,KAAKF,IAAKO,KAAKC,UAAUJ,KAElDK,SATQ,WAUJ,OAAOF,KAAKG,MAAML,aAAaM,QAAQT,KAAKF,OAAS,CAACY,QAAS,KAEnEC,UAZQ,SAYErB,GACN,IAAMY,EAAOF,KAAKO,WAOlB,OALAjB,EAAQsB,OAAOxB,GAAKc,EAAKQ,QAAQG,OAASX,EAAKQ,QAAQR,EAAKQ,QAAQG,OAAS,GAAGzB,GAAK,EAAI,EACzFc,EAAKQ,QAAQI,KAAKxB,EAAQsB,QAE1BZ,KAAKC,SAASC,GAEPa,QAAQC,QAAQ,CAAEd,KAAMA,EAAKQ,QAAQR,EAAKQ,QAAQG,OAAS,MAEtEI,aAtBQ,SAsBK3B,GACT,IAAMY,EAAOF,KAAKO,WACZW,EAAWhB,EAAKQ,QAAQS,WAAU,SAAAP,GAAM,OAAIA,EAAOxB,KAAOE,EAAQsB,OAAOxB,MAM/E,OAJAc,EAAKQ,QAAQQ,GAAY5B,EAAQsB,OAEjCZ,KAAKC,SAASC,GAEPa,QAAQC,QAAQ,CAAEd,KAAMA,EAAKQ,QAAQQ,MAEhDE,aAhCQ,SAgCK9B,GACT,IAAMY,EAAOF,KAAKO,WAMlB,OAJAL,EAAKQ,QAAUR,EAAKQ,QAAQW,QAAO,SAAAT,GAAM,OAAIA,EAAOxB,KAAOE,EAAQF,MAEnEY,KAAKC,SAASC,GAEPa,QAAQC,YCXjBM,EAAmB,SAACV,GAAD,MAAa,CAACvB,KAvBpB,qBAuBsCC,QAAS,CAACsB,YAC7DW,EAAsB,SAACX,GAAD,MAAa,CAACvB,KAvBpB,wBAuByCC,QAAS,CAACsB,YACnEY,EAAsB,SAACpC,GAAD,MAAS,CAACC,KAvBhB,wBAuBqCC,QAAS,CAACF,QAuBxDqC,EAA8BC,aACvC,SAAChC,GAAD,OAAWA,EAAMgB,WACjB,SAACA,GAAD,OAAaA,EAAQiB,KAAI,kBAAmB,CAAEvC,GAArB,EAAGA,GAAsBwC,KAAzB,EAAOA,YAEvBC,EAAkBH,aAC3B,SAAChC,GAAD,OAAWA,EAAMgB,WACjB,SAACA,GAAD,OAAaA,EAAQG,UAGVH,EArDC,WAAyB,IAAxBhB,EAAuB,uDAAf,GAAIE,EAAW,uCACpC,OAAQA,EAAOP,MACX,IANW,qBAOP,MAAM,GAAN,mBAAWK,GAAX,CAAkBE,EAAON,QAAQsB,SACrC,IAPc,wBAQV,OAAOlB,EAAMiC,KAAI,SAACf,GACd,OAAIA,EAAOxB,KAAOQ,EAAON,QAAQsB,OAAOxB,GAC7BQ,EAAON,QAAQsB,OAGnBA,KAEf,IAdc,wBAeV,OAAOlB,EAAM2B,QAAO,SAACT,GAAD,OAAYA,EAAOxB,KAAOQ,EAAON,QAAQF,MACjE,QACI,OAAOM,ICMJoC,eACX,SAACpC,GAAD,MAAY,CACRgB,QAASe,EAA4B/B,GACrCC,iBAAkBD,EAAMD,GAAGE,oBAE/B,CAAER,gBALS2C,EAbK,SAAC,GAAD,IAAGpB,EAAH,EAAGA,QAASf,EAAZ,EAAYA,iBAAkBR,EAA9B,EAA8BA,aAA9B,OAChB,yBAAKH,UAAWf,IAAI8D,aACfrB,EAAQiB,KAAI,SAACf,GAAD,OACT,kBAAC,EAAD,CACId,IAAKc,EAAOxB,GACZ1B,KAAMkD,EAAOgB,KACbhE,UAAWgD,EAAOxB,KAAOO,EACzB5B,QAAS,kBAAMoB,EAAayB,EAAOxB,c,iBCiDpC0C,eACX,SAACpC,GAAD,MAAY,CACRF,KAAME,EAAMD,GAAGD,KACfwC,aAAcH,EAAgBnC,GAC9BC,iBAAkBD,EAAMD,GAAGE,oBAE/B,CAAEJ,WANSuC,EAzDM,SAAC,GAKf,IAJHtC,EAIE,EAJFA,KACAwC,EAGE,EAHFA,aACArC,EAEE,EAFFA,iBACAJ,EACE,EADFA,QAEM0C,EAAWzC,IAASN,EACpBgD,EAAW1C,IAASN,EACpBiD,EAAW3C,IAASN,EAEpBkD,EAAc,SAACC,GAIb9C,GAHC2C,IAAUC,GAAa3C,IAAS6C,GAAY1C,EAGrC0C,EAFAnD,IAMVoD,EAAYJ,GAAUvC,EACtB,CAAC/B,UAAWsE,GACZ,CAACrE,UAAWqE,GAEZK,EAAcJ,GAAYxC,EAC1B,CAAC/B,UAAWuE,GACZ,CAACtE,UAAWsE,GAElB,OACI,yBAAKnD,UAAWf,IAAIuE,cAChB,kBAAC,EAAD,CACI9E,KAAK,MACLC,WAAW,QACXC,UAAWqE,EACXnE,WAAY6B,IAAqBuC,GAAUC,GAC3CpE,QAAS,kBAAMwB,EAAQL,MAE1B8C,EACK,kBAAC,EAAD,eACEtE,KAAK,OACLC,WAAW,QACP2E,EAHN,CAIExE,WAAYmE,GAAUtC,GAAoBwC,EAC1CpE,QAAS,kBAAMqE,EAAYlD,OAEjC,KACD8C,EACK,kBAAC,EAAD,eACEtE,KAAK,SACLC,WAAW,OACP4E,EAHN,CAIEzE,WAAYmE,GAAUtC,GAAoBuC,EAC1CnE,QAAS,kBAAMqE,EAAYlD,OAEjC,SCdC4C,eACX,SAACpC,GAAD,MAAY,CACRC,iBAAkBD,EAAMD,GAAGE,iBAC3BH,KAAME,EAAMD,GAAGD,QAGnB,CAAEL,gBANS2C,EAlCA,SAAC,GAOT,IAAD,EANFnC,EAME,EANFA,iBACAH,EAKE,EALFA,KAEAL,EAGE,EAHFA,aACAsD,EAEE,EAFFA,iBACAC,EACE,EADFA,oBAEMC,EAAehD,GAAoBH,IAASN,EAElD,OACI,4BAAQF,UAAWC,KAAE,mBAChBhB,IAAI2E,QAAS,GADG,cAEhB3E,IAAI4E,WAAaF,GAFD,cAGhB1E,IAAI6E,aAAeH,GAAgBF,GAHnB,cAIhBxE,IAAI8E,eAAiBvD,IAASN,GAAgBS,GAAoBH,IAASN,IAJ3D,KAMhByD,EACG,kBAAC,EAAD,CAAOjF,KAAK,OAAOK,QAAS,kBAAMoB,EAAa,SACjD,kBAAC,EAAD,CACEzB,KAAK,UACLE,UAAW6E,EACX1E,QAAS,kBAAM2E,GAAoB,MAEtCC,EACG,kBAACK,EAAD,MACFP,EACE,kBAACQ,EAAD,MACF,kC,mDCTCC,EArBF,SAAC,GAAuD,IAAD,EAApDtB,EAAoD,EAApDA,KAAMuB,EAA8C,EAA9CA,QAASxF,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,UAAWG,EAAc,EAAdA,QAC5CqF,EAAUnE,KAAE,mBACbhB,IAAIoF,SAA0B,SAAf1F,GADF,cAEbM,IAAIqF,QAAyB,QAAf3F,GAFD,cAGbM,IAAIsF,MAAgD,IAAzC,CAAC,OAAQ,OAAOjF,QAAQX,IAHtB,cAIbM,IAAIuF,QAAU5F,GAJD,IAOlB,OACI,yBAAKmB,KAAK,SAASC,UAAWoE,EAASrF,QAASA,GAC5C,yBAAKiB,UAAWf,IAAIwF,UACf7B,GAEL,6BAAK,8BACL,yBAAK5C,UAAWf,IAAIyF,aACfP,KC2BFQ,EAjCS,SAAC,GAOlB,IANH/B,EAME,EANFA,KACAuB,EAKE,EALFA,QACAxF,EAIE,EAJFA,WACAiG,EAGE,EAHFA,cACA7F,EAEE,EAFFA,QAEE,IADF8F,QAAWC,EACT,EADSA,MAAOC,EAChB,EADgBA,OAgBlB,OAdIH,IACA7F,EAAU,KACVoF,EAAU,oCACN,kBAAC,EAAD,CACIzF,KAAMoG,EAAMpG,KACZK,QAAS+F,EAAM/F,UAEnB,kBAAC,EAAD,CACIL,KAAMqG,EAAOrG,KACbK,QAASgG,EAAOhG,YAMxB,kBAAC,EAAD,CACI6D,KAAMA,EACNuB,QAASA,EACTxF,WAAYA,EACZC,UAAWgG,EACX7F,QAASA,K,qCCzCNiG,GANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACT,0BAAMjF,UAAWf,KAAIiG,MAChBD,IC4BME,GApBA,SAAC,GAAD,IAAGvD,EAAH,EAAGA,OAAH,OACX,yBAAK7B,KAAK,QAAQC,UAAWf,IAAI2C,QAC7B,yBAAK7B,KAAK,OACL6B,EAAOgB,MAEmB,qBAAvBhB,EAAOwD,YACX,yBAAKrF,KAAK,OAAO6B,EAAOwD,aAC1B,KACF,yBAAKpF,UAAWf,IAAIoG,OACfzD,EAAOyD,MAAM1C,KAAI,SAACuC,EAAMpE,GAAP,OACd,yBAAKA,IAAKA,EAAKf,KAAK,MAAMC,UAAWf,IAAIqG,UACrC,kBAAC,GAAD,KAAOJ,EAAKtC,MACZ,kBAAC,GAAD,KAAOsC,EAAKK,UACZ,kBAAC,GAAD,KAAOL,EAAKM,a,yDC4BjBC,GArCG,SAAC,GAOZ,IANH7C,EAME,EANFA,KACAvC,EAKE,EALFA,KACAqF,EAIE,EAJFA,IACAC,EAGE,EAHFA,SACAC,EAEE,EAFFA,SACAC,EACE,EADFA,YAMMC,EAJO,CACTC,MAAO,QACPC,SAAU,YAEON,IAAQ,QAE7B,OACI,kBAAC,KAAD,CAAO9C,KAAMA,EAAMvC,KAAMA,EAAMsF,SAAUA,IACpC,YAAsB,IAAnBI,EAAkB,EAAlBA,MAAOE,EAAW,EAAXA,KACDC,EAAWjG,IAAG,eACfhB,KAAIkH,MAAQR,GAAYM,EAAKG,SAAWH,EAAKE,QAGlD,OACI,6BACI,kBAACL,EAAD,iBACQC,EADR,CAEI1F,KAAMA,EACNL,UAAWkG,EACXN,SAAUA,EACVC,YAAaA,U,oBCI1BQ,GAlCiB,SAAC,GAAD,IAC5BC,EAD4B,EAC5BA,gBACAC,EAF4B,EAE5BA,WACAC,EAH4B,EAG5BA,mBACAC,EAJ4B,EAI5BA,WACAC,EAL4B,EAK5BA,cACAC,EAN4B,EAM5BA,iBAN4B,OAQ5B,yBAAK3G,UAAWf,KAAI2H,yBAChB,kBAAC,EAAD,CACIlI,KAAK,MACLC,WAAW,QACXG,WAAYwH,EACZvH,QAAS0H,IAEZF,EACG,kBAAC,EAAD,CACI7H,KAAK,SACLC,WAAW,MACXE,UAAWyH,EACXvH,QAAS2H,IAEf,KACDJ,EACG,kBAAC,EAAD,CACI5H,KAAK,MACLC,WAAW,MACXE,UAAW2H,EACXzH,QAAS4H,IAEf,O,6BCuCKE,GA7DS,SAAC,GAAD,IACpBC,EADoB,EACpBA,UACAC,EAFoB,EAEpBA,WACAT,EAHoB,EAGpBA,gBACAU,EAJoB,EAIpBA,iBACAC,EALoB,EAKpBA,4BALoB,OAOpB,yBAAKjH,UAAWf,KAAIoG,OAChB,kBAAC,KAAD,CACIzC,KAAK,QACLsE,aAAcJ,EACdK,OAAQ,qBAAGC,OAAoBzE,KAAI,SAACC,EAAMyE,GAAW,IAAD,EAC5CC,EAASrH,KAAE,mBACVhB,KAAIqG,UAAW,GADL,cAEVrG,KAAIsI,OAASjB,GAFH,cAGVrH,KAAIuI,gBAAkBlB,IAAwD,IAArCU,EAAiB1H,QAAQ+H,IAHxD,IAMf,OACI,yBACIvG,IAAKuG,EACLtH,KAAK,MACLhB,QAAS,kBAAMuH,GAAmBW,EAA4BI,IAC9DrH,UAAWsH,GAEX,kBAAC,GAAD,KACI,kBAAC,GAAD,CACI1E,KAAI,UAAKA,EAAL,SACJvC,KAAK,OACLqF,IAAI,QACJC,SAAUoB,EACVnB,SAAUU,EACVT,YAAY,UAGpB,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIjD,KAAI,UAAKA,EAAL,aACJvC,KAAK,OACLqF,IAAI,QACJC,SAAUoB,EACVnB,SAAUU,EACVT,YAAY,cAGpB,kBAAC,GAAD,KACI,kBAAC,GAAD,CACIjD,KAAI,UAAKA,EAAL,SACJvC,KAAK,OACLqF,IAAI,QACJE,SAAUU,EACVT,YAAY,mB,oBCjC7B4B,GAvBW,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAOC,EAAlB,EAAkBA,OAAlB,OACtB,yBAAK5H,UAAWf,KAAI4I,eAChB,kBAAC,EAAD,CACInJ,KAAK,SACLC,WAAW,QACXG,WAAY4I,EAAO5I,WACnBC,QAAS2I,EAAO3I,UAEpB,kBAAC,EAAD,CACIL,KAAK,QACLC,WAAW,OACXG,WAAY6I,EAAM7I,WAClBC,QAAS4I,EAAM5I,UAEnB,kBAAC,EAAD,CACIL,KAAK,SACLC,WAAW,MACXG,WAAY8I,EAAO9I,WACnBC,QAAS6I,EAAO7I,YC+Gb+I,GA1Ha,SAAC,GAAoC,IAAlClG,EAAiC,EAAjCA,OAAQmG,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACdC,oBAAS,GADK,mBACrD3B,EADqD,KACpC4B,EADoC,OAEZD,mBAAS,IAFG,mBAErDjB,EAFqD,KAEnCmB,EAFmC,OAGRF,oBAAS,GAHD,mBAGrDzB,EAHqD,KAGjC4B,EAHiC,KAgDtDC,EAAW,SAACC,GAAD,OAAYA,GAE7B,OACI,kBAAC,KAAD,CACIP,SAAUA,EACVQ,cAAe3G,EACf4G,SAAQ,eAAMC,MACdtB,OAAQ,gBApBqB9B,EAqBzBqD,EADI,EACJA,aADI,IAEJC,KAFI,IAEIH,SAAY1G,EAFhB,EAEgBA,KAAM8G,EAFtB,EAEsBA,YAAelB,EAFrC,EAEqCA,OAAQC,EAF7C,EAE6CA,MACjDkB,EAHI,EAGJA,WACAC,EAJI,EAIJA,MACAP,EALI,EAKJA,cACAQ,EANI,EAMJA,OANI,OAQJ,yBAAK/I,UAAWf,KAAI+J,YAChB,yBAAKhJ,UAAWf,KAAIgK,eAChB,yBAAKjJ,UAAWf,KAAIgK,eAChB,yBAAKjJ,UAAWf,KAAIiK,WAChB,kBAAC,GAAD,CACIxB,OAAS,CACL5I,WAAYwH,GAAmBuC,EAC/B9J,QAAS2I,GAEbC,MAAQ,CACJ7I,WAAYwH,GAAmBuC,IAAeC,EAC9C/J,QAAS4I,GAEbC,OAAS,CACL9I,WAAYwH,GAAmBuC,EAC/B9J,QAASiJ,KAGjB,kBAAC,GAAD,CACI1B,gBAAiBA,EACjBC,aAAcwC,EAAO1D,MAAMxD,OAC3B2E,mBAAoBA,EACpBC,WAAY,kBAhFzB,SAAC3E,EAAMuD,GACtBvD,EACI,QACA,CACI1B,GAAIiF,EAAMxD,OACNwD,EAAMA,EAAMxD,OAAS,GAAGzB,GAAK,EAC7B,EACJwC,KAAM,GAAI2C,SAAU,GAAIC,KAAM,KAyEQiB,CAAW3E,EAAMiH,EAAO1D,QAC1CqB,cAAe,kBArEzB,SAACkC,GACftC,GAAmBU,EAAiBnF,SACpC+G,EAAY,QAAS5B,GACrBmB,EAAoB,IACpBC,GAAsB,IAE1BF,GAAoB5B,GA+D6BI,CAAckC,IACnCjC,iBAAkB,kBA7DxBtB,EA6D+C0D,EAAO1D,MA3DxE8C,EADA3B,EACoB,GAEA,YAAInB,EAAM8D,cAElCf,GAAuB5B,GANF,IAACnB,QAkEV,0BAAMtF,KAAK,QAAQC,UAAWf,KAAI2C,OAAQmG,SAAUW,GAChD,kBAAC,GAAD,CACI9F,KAAK,OACLvC,KAAK,OACLqF,IAAI,QACJC,SAAU0C,EACVzC,SAAUU,EACVT,YAAY,gBAEhB,kBAAC,GAAD,CACIjD,KAAK,cACLvC,KAAK,OACLqF,IAAI,WACJE,SAAUU,EACVT,YAAY,uBAEhB,kBAAC,GAAD,CACIiB,UAAWyB,EAAclD,MACzB0B,WAAYsB,EACZ/B,gBAAiBA,EACjBU,iBAAkBA,EAClBC,6BA9Ea5B,EA8E4C0D,EAAO1D,MA9EzC,SAACgC,GAC5C,IAAI+B,EAAmB,YAAOpC,GAG1BoC,GADqC,IAArCpC,EAAiB1H,QAAQ+H,GACHL,EAAiB3E,QAAO,SAACjC,GAAD,OAAQA,IAAOiH,KAEvCL,EAAiBqC,OAAOhC,GAGlDc,EAAoBiB,GACpBhB,EAAsB/C,EAAMxD,SAAWuH,EAAoBvH,kBC+CpDiB,gBACX,SAACpC,GAAD,MAAY,CACRgB,QAAShB,EAAMgB,QACff,iBAAkBD,EAAMD,GAAGE,iBAC3BH,KAAME,EAAMD,GAAGD,QAEnB,CAAEmB,Ub/FmB,SAACC,GAAD,8CAAY,WAAO0H,GAAP,eAAAC,EAAA,sEACV1I,EAAIc,UAAU,CAACC,WADL,OAC3B4H,EAD2B,OAGjCF,EAAShH,EAAiBkH,EAAStI,OACnCoI,EAAS/I,EAAQL,IAJgB,2CAAZ,uDa+FR+B,abzFW,SAACL,GAAD,8CAAY,WAAO0H,GAAP,eAAAC,EAAA,sEACb1I,EAAIoB,aAAa,CAACL,WADL,OAC9B4H,EAD8B,OAGpCF,EAAS/G,EAAoBiH,EAAStI,OACtCoI,EAASnJ,EAAa,OAJc,2CAAZ,uDayFGiC,abnFH,SAAChC,GAAD,8CAAQ,WAAOkJ,GAAP,SAAAC,EAAA,sEAC1B1I,EAAIuB,aAAa,CAAChC,OADQ,OAGhCkJ,EAAS9G,EAAoBpC,IAC7BkJ,EAASnJ,EAAa,OAJU,2CAAR,uDamFiBA,eAAcI,WAN5CuC,EArFM,SAAC,GASf,IAKC2G,EAbJ/H,EAQE,EARFA,QACAf,EAOE,EAPFA,iBACAH,EAME,EANFA,KACAmB,EAKE,EALFA,UACAM,EAIE,EAJFA,aACAG,EAGE,EAHFA,aACAjC,EAEE,EAFFA,aACAI,EACE,EADFA,QAEM0C,EAAWzC,IAASN,EACpBgD,EAAW1C,IAASN,EACpBiD,EAAW3C,IAASN,EAI1B,GAAIS,EAEI8I,EADAvG,EACe,kBAAC,GAAD,CACXtB,OAAQF,EAAQgI,MAAK,SAAA9H,GAAM,OAAIA,EAAOxB,KAAOO,KAC7CoH,SAAU9F,EACV+F,SAAU,kBAAM7H,EAAa,SAE1BgD,EACQ,yBAAKnD,UAAWf,IAAI0K,OAC9BjI,EAAQiB,KAAI,SAACf,GAAD,OACT,kBAAC,EAAD,CACId,IAAKc,EAAOxB,GACZwC,KAAMhB,EAAOgB,KACbuB,QAASvC,EAAOyD,MAAM1C,KAAI,SAACuC,GAAD,OAAU,yBAAKpE,IAAKoE,EAAK9E,IAAK8E,EAAKtC,SAC7DjE,WAAW,MACXiG,cAAehD,EAAOxB,KAAOO,EAC7B5B,QAAS,kBAAMoB,EAAayB,EAAOxB,KACnCyE,QAAU,CACNC,MAAO,CACHpG,KAAM,SACNK,QAAS,kBAAMqD,EAAaR,EAAOxB,MAEvC2E,OAAQ,CACJrG,KAAM,SACNK,QAAS,kBAAMoB,EAAa,eAOjC,kBAAC,GAAD,CACXyB,OAAQF,EAAQgI,MAAK,SAAA9H,GAAM,OAAIA,EAAOxB,KAAOO,YAIrD,GAAIsC,EACAwG,EAAe,kBAAC,GAAD,CACX7H,OAAQ,CAACyD,MAAO,IAChB0C,SAAUpG,EACVqG,SAAU,kBAAMzH,EAAQL,UAEzB,CACH,IAAI0J,EAAiB,KAEjB1G,IACA0G,EAAiB,QAEjBzG,IACAyG,EAAiB,OAGrBH,EAAe,yBAAKzJ,UAAWf,IAAI0K,OAC9BjI,EAAQiB,KAAI,SAACf,GAAD,OACT,kBAAC,EAAD,CACId,IAAKc,EAAOxB,GACZwC,KAAMhB,EAAOgB,KACbuB,QAASvC,EAAOyD,MAAM1C,KAAI,SAACuC,GAAD,OAAU,yBAAKpE,IAAKoE,EAAK9E,IAAK8E,EAAKtC,SAC7DjE,WAAYiL,EACZ7K,QAAS,kBAAMoB,EAAayB,EAAOxB,WAOvD,OAAOqJ,KCvGII,GANC,SAAC,GAAD,IAAGpG,EAAH,EAAGA,iBAAH,OACZ,yBAAKzD,UAAWf,IAAIkF,SACfV,GAAoB,kBAACqG,GAAD,QCSdC,GAfH,WAAM,MAEkC9B,oBAAS,GAF3C,mBAEPxE,EAFO,KAEWC,EAFX,KAId,OACI,yBAAK1D,UAAU,eACX,kBAACgK,EAAD,CACIvG,iBAAkBA,EAClBC,oBAAqBA,IAEzB,kBAACuG,GAAD,CAAkBxG,iBAAkBA,M,qCCJjCyG,GANCC,aAAgB,CAE5BzI,UACAjB,OCEJI,EAAIE,KAAK,aAEJF,EAAIU,WAAWG,QAAQG,QAC1BhB,EAAII,SAAS,CAAC,QAAU,CAAC,CAAC,GAAK,EAAE,KAAO,gBAAgB,YAAc,4BAA4B,MAAQ,CAAC,CAAC,GAAK,EAAE,KAAO,SAAS,SAAW,aAAa,KAAO,UAAU,CAAC,GAAK,EAAE,KAAO,SAAS,SAAW,aAAa,KAAO,UAAU,CAAC,GAAK,EAAE,KAAO,SAAS,SAAW,aAAa,KAAO,UAAU,CAAC,GAAK,EAAE,KAAO,SAAS,SAAW,aAAa,KAAO,UAAU,CAAC,GAAK,EAAE,KAAO,SAAS,SAAW,aAAa,KAAO,UAAU,CAAC,GAAK,EAAE,KAAO,SAAS,SAAW,aAAa,KAAO,UAAU,CAAC,GAAK,EAAE,KAAO,SAAS,SAAW,aAAa,KAAO,UAAU,CAAC,GAAK,EAAE,KAAO,SAAS,SAAW,aAAa,KAAO,UAAU,CAAC,GAAK,GAAG,KAAO,UAAU,SAAW,cAAc,KAAO,WAAW,CAAC,GAAK,GAAG,KAAO,UAAU,SAAW,cAAc,KAAO,WAAW,CAAC,GAAK,GAAG,KAAO,UAAU,SAAW,cAAc,KAAO,WAAW,CAAC,GAAK,GAAG,KAAO,UAAU,SAAW,cAAc,KAAO,WAAW,CAAC,GAAK,GAAG,KAAO,UAAU,SAAW,cAAc,KAAO,WAAW,CAAC,GAAK,GAAG,KAAO,UAAU,SAAW,cAAc,KAAO,gBAGxgC,IAAMmJ,GCXS,SAAwBC,GACnC,IAAMC,EAAc,CAACC,KAAOC,MAGtBC,EAAiB,CAFIC,KAAe,WAAf,EAAmBJ,IAOxCK,GAHgB,qBAAXC,QACPA,OAAOC,sCACNC,MACoC,WAAhB,EAAoBL,GAQ7C,OANcM,aACVb,GACAG,EACAM,GDHMK,CAAenK,EAAIU,YAEjC0J,IAAS9D,OACP,kBAAC,IAAM+D,WAAP,KACE,kBAAC,IAAD,CAAUd,MAAOA,IACf,kBAAC,GAAD,QAGJe,SAASC,eAAe,W","file":"static/js/main.57bb2337.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"plate\":\"Plate_plate__6E6ju\",\"greenPlate\":\"Plate_greenPlate__2zV_9\",\"goldPlate\":\"Plate_goldPlate__2qd3L\",\"redPlate\":\"Plate_redPlate__3pckl\",\"clickedPlate\":\"Plate_clickedPlate__uPfJ9\",\"disabledPlate\":\"Plate_disabledPlate__25yZh\",\"toggledPlate\":\"Plate_toggledPlate__3Oemj\",\"greenTheme\":\"Plate_greenTheme__17YCM\",\"goldTheme\":\"Plate_goldTheme__1zvtx\",\"redTheme\":\"Plate_redTheme__2S6OT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2Yh1O\",\"goldCard\":\"Card_goldCard__3ubRv\",\"redCard\":\"Card_redCard__1mKA6\",\"clicked\":\"Card_clicked__JyUaG\",\"cardName\":\"Card_cardName__Io2pk\",\"cardContent\":\"Card_cardContent__3CPJu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"schemaForm\":\"SchemaForm_schemaForm__ZSOQT\",\"stickyWrapper\":\"SchemaForm_stickyWrapper__2zrdq\",\"schemaBar\":\"SchemaForm_schemaBar__58k4K\",\"schema\":\"SchemaForm_schema__1jhBp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__XyDSV\",\"stickyHeader\":\"Header_stickyHeader__3OD_w\",\"headerList\":\"Header_headerList__2_W6H\",\"headerPanel\":\"Header_headerPanel__MtB3F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"SchemaFormItems_items__3Mzdw\",\"itemsRow\":\"SchemaFormItems_itemsRow__2r-WJ\",\"remove\":\"SchemaFormItems_remove__1pGIb\",\"clickedItemsRow\":\"SchemaFormItems_clickedItemsRow__YDDPG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"schema\":\"Schema_schema__3twNs\",\"items\":\"Schema_items__EED5a\",\"itemsRow\":\"Schema_itemsRow__HhJYQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"SchemasBoard_board__1vukw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"schemasList\":\"SchemasList_schemasList__1I2lw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"schemasPanel\":\"SchemasPanel_schemasPanel__29TxM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__3ZyJB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Item_item__1Uhav\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormField_error__BhTLT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"schemaFormItemsControls\":\"SchemaFormItemsControls_schemaFormItemsControls__2My1o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"schemaButtons\":\"SchemaFormButtons_schemaButtons__1x5xa\"};","import React from 'react';\nimport cn from 'classnames';\nimport css from './Plate.module.css';\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Functional component which renders a custom clickable or togglable Plate button.\n * @param {Object}               props\n * @param {string}               props.text         - Text to display on the Plate.\n * @param {'green'|'gold'|'red'} [props.colorTheme] - Color theme of the Plate.\n * @param {boolean}              [props.isClicked]  - Indicates whether the Plate is clicked. If true, onClick will be nullified.\n * @param {boolean}              [props.isToggled]  - Indicates whether the Plate is clicked and stayed clickable.\n * @param {boolean}              [props.isDisabled] - Indicates whether the Plate is disabled.\n * @param {EventHandlerFunction} props.onClick      - On click function for the Plate.\n */\nconst Plate = ({\n    text,\n    colorTheme,\n    isClicked,\n    isToggled,\n    isDisabled,\n    onClick\n}) => {\n    let plateCssObj = {\n        [css.greenPlate]: colorTheme === 'green',\n        [css.goldPlate]: colorTheme === 'gold',\n        [css.redPlate]: colorTheme === 'red',\n        [css.plate]: ['green', 'gold', 'red'].indexOf(colorTheme) === -1\n    };\n\n    if (isDisabled) {\n        plateCssObj[css.disabledPlate] = true;\n        onClick = null;\n    } else {\n        if (isClicked) {\n            onClick = null;\n        }\n        Object.assign(plateCssObj, {\n            [css.clickedPlate]: isClicked,\n            [css.toggledPlate]: !isClicked && isToggled,\n            [css.greenTheme]: isClicked && colorTheme === 'green',\n            [css.goldTheme]: (isClicked || isToggled) && colorTheme === 'gold',\n            [css.redTheme]: (isClicked || isToggled) && colorTheme === 'red'\n        });\n    }\n\n    return (\n        <div role=\"button\" className={cn(plateCssObj)} onClick={onClick}>\n            {text}\n        </div>\n    );\n};\n\nexport default Plate;","const SELECT_SCHEMA = 'ui/SELECT_SCHEMA';\nconst SET_ADD_SCHEMA = 'ui/SET_ADD_SCHEMA';\nconst SET_MODE = 'ui/SET_MODE';\n\n/**\n * Enum for the modes of the ui.\n * @enum {string}\n */\nexport const UiModes = {\n    SHOW: 'SHOW',\n    ADD: 'ADD',\n    EDIT: 'EDIT',\n    DELETE: 'DELETE'\n};\n\nconst ui = (\n    state = {\n        selectedSchemaId: null,\n        mode: UiModes.SHOW\n    },\n    action\n) => {\n    switch (action.type) {\n        case SELECT_SCHEMA:\n            return {...state, selectedSchemaId: action.payload.id};\n        case SET_MODE:\n            return {...state, mode: action.payload.mode};\n        default:\n            return state;\n    }\n};\n\nexport const selectSchema = (id) => ({type: SELECT_SCHEMA, payload: {id}});\nexport const setAddSchema = (isAdd) => ({type: SET_ADD_SCHEMA, payload: {isAdd}});\nexport const setMode = (mode) => ({type: SET_MODE, payload: {mode}});\n\nexport default ui;","const API = {\n    key: null,\n\n    init(key) {\n        this.key = key;\n    },\n    saveData(data) {\n        localStorage.setItem(this.key, JSON.stringify(data));\n    },\n    loadData() {\n        return JSON.parse(localStorage.getItem(this.key)) || {schemas: []};\n    },\n    addSchema(payload) {\n        const data = this.loadData();\n\n        payload.schema.id = data.schemas.length ? data.schemas[data.schemas.length - 1].id + 1 : 1;\n        data.schemas.push(payload.schema);\n\n        this.saveData(data);\n\n        return Promise.resolve({ data: data.schemas[data.schemas.length - 1] });\n    },\n    updateSchema(payload) {\n        const data = this.loadData();\n        const updateId = data.schemas.findIndex(schema => schema.id === payload.schema.id);\n\n        data.schemas[updateId] = payload.schema;\n\n        this.saveData(data);\n\n        return Promise.resolve({ data: data.schemas[updateId] });\n    },\n    deleteSchema(payload) {\n        const data = this.loadData();\n\n        data.schemas = data.schemas.filter(schema => schema.id !== payload.id);\n\n        this.saveData(data);\n\n        return Promise.resolve();\n    }\n};\n\nexport default API;","import { createSelector } from \"reselect\";\n\nimport API from \"../../api\";\nimport { selectSchema, setMode, UiModes } from \"./ui\";\n\nconst ADD_SCHEMA = 'schemas/ADD_SCHEMA';\nconst UPDATE_SCHEMA = 'schemas/UPDATE_SCHEMA';\nconst DELETE_SCHEMA = 'schemas/DELETE_SCHEMA';\n\nconst schemas = (state = [], action) => {\n    switch (action.type) {\n        case ADD_SCHEMA:\n            return [...state, action.payload.schema];\n        case UPDATE_SCHEMA:\n            return state.map((schema) => {\n                if (schema.id === action.payload.schema.id) {\n                    return action.payload.schema;\n                }\n\n                return schema;\n            });\n        case DELETE_SCHEMA:\n            return state.filter((schema) => schema.id !== action.payload.id);\n        default:\n            return state;\n    }\n};\n\nconst addSchemaSuccess = (schema) => ({type: ADD_SCHEMA, payload: {schema}});\nconst updateSchemaSuccess = (schema) => ({type: UPDATE_SCHEMA, payload: {schema}});\nconst deleteSchemaSuccess = (id) => ({type: DELETE_SCHEMA, payload: {id}});\n\n\nexport const addSchema = (schema) => async (dispatch) => {\n    const response = await API.addSchema({schema});\n\n    dispatch(addSchemaSuccess(response.data));\n    dispatch(setMode(UiModes.SHOW));\n};\nexport const updateSchema = (schema) => async (dispatch) => {\n    const response = await API.updateSchema({schema});\n\n    dispatch(updateSchemaSuccess(response.data));\n    dispatch(selectSchema(null));\n};\nexport const deleteSchema = (id) => async (dispatch) => {\n    await API.deleteSchema({id});\n\n    dispatch(deleteSchemaSuccess(id));\n    dispatch(selectSchema(null));\n};\n\n\nexport const selectSchemasForSchemasList = createSelector(\n    (state) => state.schemas,\n    (schemas) => schemas.map(({ id, name }) => ({ id, name }))\n);\nexport const getSchemasCount = createSelector(\n    (state) => state.schemas,\n    (schemas) => schemas.length\n);\n\nexport default schemas;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport css from './SchemasList.module.css';\nimport Plate from '../Common/Plate/Plate';\nimport { selectSchema } from '../../redux/reducers/ui';\nimport { selectSchemasForSchemasList } from '../../redux/reducers/schemas';\n\n/**\n * Renders a horizontal list of Schemas [Plates]{@link Plate} to choose.\n * @param {Object}      props\n * @param {Object[]}    props.schemas          - An array of ids and names of the all schemas from the Redux State.\n * @param {number}      props.schemas.id       - Schema id.\n * @param {string}      props.schemas.name     - Schema name.\n * @param {number|null} props.selectedSchemaId - The id of the selected schema from the Redux State.\n * @param {function}    props.selectSchema     - A function to select schema.\n */\nconst SchemasList = ({ schemas, selectedSchemaId, selectSchema }) => (\n    <div className={css.schemasList}>\n        {schemas.map((schema) => (\n            <Plate\n                key={schema.id}\n                text={schema.name}\n                isClicked={schema.id === selectedSchemaId}\n                onClick={() => selectSchema(schema.id)}\n            />\n        ))}\n    </div>\n);\n\nexport default connect(\n    (state) => ({\n        schemas: selectSchemasForSchemasList(state),\n        selectedSchemaId: state.ui.selectedSchemaId\n    }),\n    { selectSchema }\n)(SchemasList);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport css from './SchemasPanel.module.css';\nimport Plate from '../Common/Plate/Plate';\nimport { setMode, UiModes} from '../../redux/reducers/ui';\nimport { getSchemasCount } from '../../redux/reducers/schemas';\n\n/**\n * Renders a control panel of [Plates]{@link Plate} to set a mode of the ui.\n * @param {Object}      props\n * @param {string}      props.mode             - The current ui mode from the Redux State.\n * @param {number}      props.schemasCount     - The number of existing schemas.\n * @param {number|null} props.selectedSchemaId - The id of the selected schema from the Redux State.\n * @param {function}    props.setMode          - A function to set current ui mode.\n */\nconst SchemasPanel = ({\n    mode,\n    schemasCount,\n    selectedSchemaId,\n    setMode\n}) => {\n    const isAdd    = mode === UiModes.ADD;\n    const isEdit   = mode === UiModes.EDIT;\n    const isDelete = mode === UiModes.DELETE;\n\n    const handleClick = (newMode) => {\n        if ((isEdit || isDelete) && mode === newMode && !selectedSchemaId) {\n            setMode(UiModes.SHOW);\n        } else {\n            setMode(newMode);\n        }\n    }\n\n    const editProps = isEdit && selectedSchemaId\n        ? {isClicked: isEdit}\n        : {isToggled: isEdit};\n\n    const deleteProps = isDelete && selectedSchemaId\n        ? {isClicked: isDelete}\n        : {isToggled: isDelete};\n\n    return (\n        <div className={css.schemasPanel}>\n            <Plate\n                text='Add'\n                colorTheme='green'\n                isClicked={isAdd}\n                isDisabled={selectedSchemaId && (isEdit || isDelete)}\n                onClick={() => setMode(UiModes.ADD)}\n            />\n            {schemasCount\n                ? <Plate\n                    text='Edit'\n                    colorTheme='gold'\n                    {...editProps}\n                    isDisabled={isAdd || (selectedSchemaId && isDelete)}\n                    onClick={() => handleClick(UiModes.EDIT)}\n                />\n            : null}\n            {schemasCount\n                ? <Plate\n                    text='Delete'\n                    colorTheme='red'\n                    {...deleteProps}\n                    isDisabled={isAdd || (selectedSchemaId && isEdit)}\n                    onClick={() => handleClick(UiModes.DELETE)}\n                />\n            : null}\n        </div>\n    );\n};\n\nexport default connect(\n    (state) => ({\n        mode: state.ui.mode,\n        schemasCount: getSchemasCount(state),\n        selectedSchemaId: state.ui.selectedSchemaId\n    }),\n    { setMode }\n)(SchemasPanel);","import React from 'react';\nimport { connect } from 'react-redux';\nimport cn from 'classnames';\n\nimport css from './Header.module.css';\nimport Plate from '../Common/Plate/Plate';\nimport SchemasListContainer from '../SchemasList/SchemasListContainer';\nimport SchemasPanelContainer from '../SchemasPanel/SchemasPanelContainer';\nimport { selectSchema, UiModes } from '../../redux/reducers/ui';\n\n/**\n * Header component with control buttons.\n * Consists of two parts - a clickable [Plate]{@link Plate} button and a panel to display either the [SchemasList]{@link SchemasList} or the control [SchemasPanel]{@link SchemasPanel}.\n * @param {Object}      props\n * @param {number|null} props.selectedSchemaId    - The id of the selected schema from the Redux State.\n * @param {string}      props.mode                - The current ui mode from the Redux State.\n * @param {function}    props.selectSchema        - The dispatch function to select schema.\n * @param {boolean}     props.isSchemasClicked    - Indicates whether the Schemas button is clicked.\n * @param {function}    props.setIsSchemasClicked - Set value of the isSchemasClicked.\n */\nconst Header = ({\n    selectedSchemaId,\n    mode,\n    // profile,\n    selectSchema,\n    isSchemasClicked,\n    setIsSchemasClicked\n}) => {\n    const isShowSchema = selectedSchemaId && mode === UiModes.SHOW;\n\n    return (\n        <header className={cn({\n            [css.header]: true,\n            [css.headerList]: isShowSchema,\n            [css.headerPanel]: !isShowSchema && isSchemasClicked,\n            [css.stickyHeader]: !(mode === UiModes.ADD || (selectedSchemaId && mode === UiModes.EDIT))\n        })}>\n            {isShowSchema ?\n                <Plate text='Back' onClick={() => selectSchema(null)} />\n            : <Plate\n                text='Schemas'\n                isClicked={isSchemasClicked}\n                onClick={() => setIsSchemasClicked(true)}\n            />}\n            {isShowSchema ?\n                <SchemasListContainer />\n            : isSchemasClicked ?\n                <SchemasPanelContainer />\n            : <div />}\n            {/* TODO <Plate text={profile.name} onClick={() => setContent(profile)} /> */}\n        </header>\n    );\n};\n\nexport default connect(\n    (state) => ({\n        selectedSchemaId: state.ui.selectedSchemaId,\n        mode: state.ui.mode,\n        // profile: state.profile\n    }),\n    { selectSchema }\n)(Header);","import React from 'react';\nimport cn from 'classnames';\nimport css from './Card.module.css';\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Functional component which renders a custom Card element.\n * @param {Object}               props\n * @param {string}               props.name         - Name of the Card.\n * @param {*}                    props.content      - Content of the Card.\n * @param {'gold'|'red'}         [props.colorTheme] - Color theme of the Card.\n * @param {boolean}              [props.isClicked]  - Indicates whether the Card is clicked.\n * @param {EventHandlerFunction} props.onClick      - On click function for the Card.\n */\nconst Card = ({ name, content, colorTheme, isClicked, onClick }) => {\n    const cardCss = cn({\n        [css.goldCard]: colorTheme === 'gold',\n        [css.redCard]: colorTheme === 'red',\n        [css.card]: ['gold', 'red'].indexOf(colorTheme) === -1,\n        [css.clicked]: isClicked\n    });\n\n    return (\n        <div role=\"button\" className={cardCss} onClick={onClick}>\n            <div className={css.cardName}>\n                {name}\n            </div>\n            <div><hr /></div>\n            <div className={css.cardContent}>\n                {content}\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\n\nimport Card from './Card';\nimport Plate from '../Plate/Plate';\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Functional component which wraps the [Card]{@link Card} element. When it is clicked, CardWithButtons passes into the [Card]{@link Card} two clickable [Plates]{@link Plate} as the content.\n * @param {Object}               props\n * @param {string}               props.name          - Name of the Card.\n * @param {*}                    props.content       - Content of the Card.\n * @param {'gold'|'red'}         [props.colorTheme]  - Color theme of the Card.\n * @param {boolean}              props.cardIsClicked - If Card is clicked, then Card onClick will be nullified and two Plates will be displayed instead of the content prop.\n * @param {EventHandlerFunction} props.onClick       - On click function for the Card.\n *\n * @param {Object}               props.buttons                - Props of the Plates to display as the Card's content.\n * @param {Object}               props.buttons.first          - The first Plate's props.\n * @param {string}               props.buttons.first.text     - Text to display on the first Plate.\n * @param {EventHandlerFunction} props.buttons.first.onClick  - On click function for the first Plate.\n * @param {Object}               props.buttons.second         - The second Plate's props.\n * @param {string}               props.buttons.second.text    - Text to display on the second Plate.\n * @param {EventHandlerFunction} props.buttons.second.onClick - On click function for the second Plate.\n */\nconst CardWithButtons = ({\n    name,\n    content,\n    colorTheme,\n    cardIsClicked,\n    onClick,\n    buttons: { first, second }\n}) => {\n    if (cardIsClicked) {\n        onClick = null;\n        content = <>\n            <Plate\n                text={first.text}\n                onClick={first.onClick}\n            />\n            <Plate\n                text={second.text}\n                onClick={second.onClick}\n            />\n        </>;\n    }\n\n    return (\n        <Card\n            name={name}\n            content={content}\n            colorTheme={colorTheme}\n            isClicked={cardIsClicked}\n            onClick={onClick}\n        />\n    );\n};\n\nexport default CardWithButtons;","import React from 'react';\nimport css from './Item.module.css';\n\n/**\n * Component to display content as a cell.\n * @param {Object} props\n * @param {*}      props.children - Content to display.\n */\nconst Item = ({ children }) => (\n    <span className={css.item}>\n        {children}\n    </span>\n);\n\nexport default Item;","import React from 'react';\n\nimport css from './Schema.module.css';\nimport Item from '../Common/Item/Item';\n\n/**\n * Renders passed schema with all its items.\n * @param {Object}   props\n * @param {Object}   props.schema                - Schema information.\n * @param {number}   props.schema.id             - Schema id.\n * @param {string}   props.schema.name           - Schema name.\n * @param {string}   [props.schema.description]  - Schema description.\n * @param {Object[]} props.schema.items          - Array of schema items.\n * @param {number}   props.schema.items.id       - Schema item id.\n * @param {string}   props.schema.items.name     - Schema item name.\n * @param {string}   props.schema.items.quantity - Schema item quantity.\n * @param {string}   props.schema.items.time     - Schema item time.\n */\nconst Schema = ({ schema }) => (\n    <div role=\"table\" className={css.schema}>\n        <div role=\"row\">\n            {schema.name}\n        </div>\n        {typeof schema.description !== 'undefined' ?\n            <div role=\"row\">{schema.description}</div>\n        : null}\n        <div className={css.items}>\n            {schema.items.map((item, key) => (\n                <div key={key} role=\"row\" className={css.itemsRow}>\n                    <Item>{item.name}</Item>\n                    <Item>{item.quantity}</Item>\n                    <Item>{item.time}</Item>\n                </div>\n            ))}\n        </div>\n    </div>\n);\n\nexport default Schema;","import React from 'react';\nimport { Field } from 'react-final-form';\nimport cn from 'classnames';\nimport css from './FormField.module.css';\n\n/**\n * Function with validation rule.\n * @callback ValidationFunction\n * @param {string} value - Value to validate.\n * @returns {boolean} - Indicates whether value is valid.\n */\n\n/**\n * Functional component to wrap the [Field]{@link https://final-form.org/docs/react-final-form/api/Field} component of the [React Final Form]{@link https://final-form.org/react} library.\n * @param {Object}             props\n * @param {string}             props.name          - Field name.\n * @param {string}             props.type          - Field type.\n * @param {string}             props.tag           - Tag to render inside the Field component.\n * @param {ValidationFunction} [props.validate]    - Field validation function.\n * @param {boolean}            props.disabled      - Indicates whether Field is disabled.\n * @param {string}             [props.placeholder] - Field placeholder.\n */\nconst FormField = ({\n    name,\n    type,\n    tag,\n    validate,\n    disabled,\n    placeholder\n}) => {\n    const tags = {\n        input: 'input',\n        textarea: 'textarea'\n    };\n    const TagName = tags[tag] || 'input';\n\n    return (\n        <Field name={name} type={type} validate={validate}>\n            {({ input, meta }) => {\n                const fieldCss = cn({\n                    [css.error]: validate && meta.touched && meta.error\n                });\n\n                return (\n                    <div>\n                        <TagName\n                            {...input}\n                            type={type}\n                            className={fieldCss}\n                            disabled={disabled}\n                            placeholder={placeholder}\n                        />\n                    </div>\n                );\n            }}\n        </Field>\n    );\n};\n\nexport default FormField;","import React from 'react';\n\nimport css from './SchemaFormItemsControls.module.css';\nimport Plate from '../../Common/Plate/Plate';\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Renders [Plates]{@link {Plate}} to add new or remove existing items rows during work with [SchemaFormContainer]{@link SchemaFormContainer}.\n * @param {Object}               props\n * @param {boolean}              props.isRemoveClicked    - Indicates whether Remove Plate is clicked.\n * @param {boolean}              props.showRemove         - If true, show Remove and All Plates.\n * @param {boolean}              props.isRemoveAllClicked - Indicates whether All Plate is clicked.\n * @param {EventHandlerFunction} props.addOnClick         - On click function for Add Plate.\n * @param {EventHandlerFunction} props.removeOnClick      - On click function for Remove Plate.\n * @param {EventHandlerFunction} props.removeAllOnClick   - On click function for All Plate.\n */\nconst SchemaFormItemsControls = ({\n    isRemoveClicked,\n    showRemove,\n    isRemoveAllClicked,\n    addOnClick,\n    removeOnClick,\n    removeAllOnClick\n}) => (\n    <div className={css.schemaFormItemsControls}>\n        <Plate\n            text='Add'\n            colorTheme='green'\n            isDisabled={isRemoveClicked}\n            onClick={addOnClick}\n        />\n        {showRemove ?\n            <Plate\n                text='Remove'\n                colorTheme='red'\n                isToggled={isRemoveClicked}\n                onClick={removeOnClick}\n            />\n        : null}\n        {isRemoveClicked ?\n            <Plate\n                text='All'\n                colorTheme='red'\n                isToggled={isRemoveAllClicked}\n                onClick={removeAllOnClick}\n            />\n        : null}\n    </div>\n);\n\nexport default SchemaFormItemsControls;","import React from 'react';\nimport { FieldArray } from 'react-final-form-arrays';\nimport cn from 'classnames';\n\nimport css from './SchemaFormItems.module.css';\nimport Item from '../../Common/Item/Item';\nimport FormField from '../../Common/FormField/FormField';\n\n/**\n * Function with validation rule.\n * @callback ValidationFunction\n * @param {string} value - Value to validate.\n * @returns {boolean} - Indicates whether value is valid.\n */\n\n/**\n * Renders Schema's items in the table-like style with the help of the [FieldArray]{@link https://github.com/final-form/react-final-form-arrays#fieldarray--reactcomponenttypefieldarrayprops} and [FormField]{@link FormField}.\n * @param {Object}             props\n * @param {Object[]}           props.initItems          - Initial values of the schema's items.\n * @param {number}             props.initItems.id       - Initial item id.\n * @param {string}             props.initItems.name     - Initial item name.\n * @param {string}             props.initItems.quantity - Initial item quantity.\n * @param {string}             props.initItems.time     - Initial item time.\n * @param {ValidationFunction} props.onValidate         - Field validation function.\n * @param {boolean}            props.isRemoveClicked    - Indicates whether Remove button is clicked.\n * @param {number[]}           props.itemsIdsToRemove   - Array of items ids to remove from the form.\n * @param {function}           props.handleRemoveOnItemsRowClick - On item row click function.\n */\nconst SchemaFormItems = ({\n    initItems,\n    onValidate,\n    isRemoveClicked,\n    itemsIdsToRemove,\n    handleRemoveOnItemsRowClick\n}) => (\n    <div className={css.items}>\n        <FieldArray\n            name='items'\n            initialValue={initItems}\n            render={({ fields }) => fields.map((name, index) => {\n                let rowCss = cn({\n                    [css.itemsRow]: true,\n                    [css.remove]: isRemoveClicked,\n                    [css.clickedItemsRow]: isRemoveClicked && itemsIdsToRemove.indexOf(index) !== -1\n                });\n\n                return (\n                    <div\n                        key={index}\n                        role=\"row\"\n                        onClick={() => isRemoveClicked && handleRemoveOnItemsRowClick(index)}\n                        className={rowCss}\n                    >\n                        <Item>\n                            <FormField\n                                name={`${name}.name`}\n                                type='text'\n                                tag='input'\n                                validate={onValidate}\n                                disabled={isRemoveClicked}\n                                placeholder='Name'\n                            />\n                        </Item>\n                        <Item>\n                            <FormField\n                                name={`${name}.quantity`}\n                                type='text'\n                                tag='input'\n                                validate={onValidate}\n                                disabled={isRemoveClicked}\n                                placeholder='Quantity'\n                            />\n                        </Item>\n                        <Item>\n                            <FormField\n                                name={`${name}.time`}\n                                type='text'\n                                tag='input'\n                                disabled={isRemoveClicked}\n                                placeholder='Time'\n                            />\n                        </Item>\n                    </div>\n                );\n            })}\n        />\n    </div>\n);\n\nexport default SchemaFormItems;","import React from 'react';\n\nimport css from './SchemaFormButtons.module.css';\nimport Plate from '../../Common/Plate/Plate';\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Renders [Plates]{@link Plate} as form buttons.\n * @param {Object}               props\n * @param {Object}               props.submit            - Props for the Submit Plate.\n * @param {boolean}              props.submit.isDisabled - Indicates whether Plate is disabled.\n * @param {EventHandlerFunction} props.submit.onClick    - On click function for Submit Plate.\n * @param {Object}               props.reset             - Props for the Reset Plate.\n * @param {boolean}              props.reset.isDisabled  - Indicates whether Plate is disabled.\n * @param {EventHandlerFunction} props.reset.onClick     - On click function for Reset Plate.\n * @param {Object}               props.cancel            - Props for the Cancel Plate.\n * @param {boolean}              props.cancel.isDisabled - Indicates whether Plate is disabled.\n * @param {EventHandlerFunction} props.cancel.onClick    - On click function for Cancel Plate.\n */\nconst SchemaFormButtons = ({ submit, reset, cancel }) => (\n    <div className={css.schemaButtons}>\n        <Plate\n            text='Submit'\n            colorTheme='green'\n            isDisabled={submit.isDisabled}\n            onClick={submit.onClick}\n        />\n        <Plate\n            text='Reset'\n            colorTheme='gold'\n            isDisabled={reset.isDisabled}\n            onClick={reset.onClick}\n        />\n        <Plate\n            text='Cancel'\n            colorTheme='red'\n            isDisabled={cancel.isDisabled}\n            onClick={cancel.onClick}\n        />\n    </div>\n);\n\nexport default SchemaFormButtons;","import React, { useState } from 'react';\nimport { Form } from 'react-final-form';\nimport arrayMutators from 'final-form-arrays';\n\nimport css from './SchemaForm.module.css';\nimport FormField from '../Common/FormField/FormField';\nimport SchemaFormItemsControls from './SchemaFormItemsControls/SchemaFormItemsControls';\nimport SchemaFormItems from './SchemaFormItems/SchemaFormItems';\nimport SchemaFormButtons from './SchemaFormButtons/SchemaFormButtons';\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/**\n * Form container to add or edit schemas. [React Final Form]{@link https://final-form.org/react} library is used.\n * @param {Object}               props\n * @param {Object}               props.schema                - Initial data for the form.\n * @param {number}               [props.schema.id]           - Schema id.\n * @param {string}               [props.schema.name]         - Schema name.\n * @param {string}               [props.schema.description]  - Schema description.\n * @param {Object[]}             props.schema.items          - Array of schema items.\n * @param {number}               props.schema.items.id       - Schema item id.\n * @param {string}               props.schema.items.name     - Schema item name.\n * @param {string}               props.schema.items.quantity - Schema item quantity.\n * @param {string}               [props.schema.items.time]   - Schema item time.\n * @param {EventHandlerFunction} props.onSubmit              - On click function for Submit Plate.\n * @param {EventHandlerFunction} props.onCancel              - On click function for Cancel Plate.\n */\nconst SchemaFormContainer = ({ schema, onSubmit, onCancel }) => {\n    const [isRemoveClicked, setIsRemoveClicked] = useState(false);\n    const [itemsIdsToRemove, setItemsIdsToRemove] = useState([]);\n    const [isRemoveAllClicked, setIsRemoveAllClicked] = useState(false);\n\n    const addOnClick = (push, items) => {\n        push(\n            'items',\n            {\n                id: items.length ?\n                    items[items.length - 1].id + 1 :\n                    1,\n                name: '', quantity: '', time: ''\n            }\n        );\n    };\n\n    const removeOnClick = (removeBatch) => {\n        if (isRemoveClicked && itemsIdsToRemove.length) {\n            removeBatch('items', itemsIdsToRemove);\n            setItemsIdsToRemove([]);\n            setIsRemoveAllClicked(false);\n        }\n        setIsRemoveClicked(!isRemoveClicked);\n    };\n\n    const removeAllOnClick = (items) => {\n        if (isRemoveAllClicked) {\n            setItemsIdsToRemove([]);\n        } else {\n            setItemsIdsToRemove([...items.keys()]);\n        }\n        setIsRemoveAllClicked(!isRemoveAllClicked);\n    };\n\n    const handleRemoveOnItemsRowClick = (items) => (index) => {\n        let newItemsIdsToRemove = [...itemsIdsToRemove];\n\n        if (itemsIdsToRemove.indexOf(index) !== -1) {\n            newItemsIdsToRemove = itemsIdsToRemove.filter((id) => id !== index);\n        } else {\n            newItemsIdsToRemove = itemsIdsToRemove.concat(index);\n        }\n\n        setItemsIdsToRemove(newItemsIdsToRemove);\n        setIsRemoveAllClicked(items.length === newItemsIdsToRemove.length);\n    };\n\n    const required = (value) => !value;\n\n    return (\n        <Form\n            onSubmit={onSubmit}\n            initialValues={schema}\n            mutators={{...arrayMutators}}\n            render={({\n                handleSubmit,\n                form: { mutators: { push, removeBatch }, submit, reset },\n                submitting,\n                dirty,\n                initialValues,\n                values\n            }) => (\n                <div className={css.schemaForm}>\n                    <div className={css.stickyWrapper}>\n                        <div className={css.stickyWrapper}>\n                            <div className={css.schemaBar}>\n                                <SchemaFormButtons\n                                    submit={({\n                                        isDisabled: isRemoveClicked || submitting,\n                                        onClick: submit\n                                    })}\n                                    reset={({\n                                        isDisabled: isRemoveClicked || submitting || !dirty,\n                                        onClick: reset\n                                    })}\n                                    cancel={({\n                                        isDisabled: isRemoveClicked || submitting,\n                                        onClick: onCancel\n                                    })}\n                                />\n                                <SchemaFormItemsControls\n                                    isRemoveClicked={isRemoveClicked}\n                                    showRemove={!!values.items.length}\n                                    isRemoveAllClicked={isRemoveAllClicked}\n                                    addOnClick={() => addOnClick(push, values.items)}\n                                    removeOnClick={() => removeOnClick(removeBatch)}\n                                    removeAllOnClick={() => removeAllOnClick(values.items)}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <form role=\"table\" className={css.schema} onSubmit={handleSubmit}>\n                        <FormField\n                            name='name'\n                            type='text'\n                            tag='input'\n                            validate={required}\n                            disabled={isRemoveClicked}\n                            placeholder='Schema Name'\n                        />\n                        <FormField\n                            name='description'\n                            type='text'\n                            tag='textarea'\n                            disabled={isRemoveClicked}\n                            placeholder='Schema Description'\n                        />\n                        <SchemaFormItems\n                            initItems={initialValues.items}\n                            onValidate={required}\n                            isRemoveClicked={isRemoveClicked}\n                            itemsIdsToRemove={itemsIdsToRemove}\n                            handleRemoveOnItemsRowClick={handleRemoveOnItemsRowClick(values.items)}\n                        />\n                    </form>\n                </div>\n            )}\n        />\n    );\n};\n\nexport default SchemaFormContainer;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport css from './SchemasBoard.module.css';\nimport Card from '../Common/Card/Card';\nimport CardWithButtons from '../Common/Card/CardWithButtons';\nimport Schema from '../Schema/Schema';\nimport SchemaFormContainer from '../SchemaForm/SchemaFormContainer';\nimport { addSchema, updateSchema, deleteSchema } from '../../redux/reducers/schemas';\nimport { selectSchema, setMode, UiModes } from '../../redux/reducers/ui';\n\n/**\n * Callback for events handling.\n * @callback EventHandlerFunction\n */\n\n/** \n * Component to display a list of all Schemas by [Card]{@link Card} or [CardWithButtons]{@link CardWithButtons} or a single selected [Schema]{@link Schema} or [SchemaFormContainer]{@link SchemaFormContainer}. The displayed content depends on value of the selectedSchemaId and mode parameters.\n * @param {Object}               props\n * @param {Object[]}             props.schemas                - The data of the all schemas from the Redux State.\n * @param {number}               props.schemas.id             - Schema id.\n * @param {string}               props.schemas.name           - Schema name.\n * @param {string}               [props.schemas.description]  - Schema description.\n * @param {Object[]}             props.schemas.items          - Array of schema items.\n * @param {number}               props.schemas.items.id       - Schema item id.\n * @param {string}               props.schemas.items.name     - Schema item name.\n * @param {string}               props.schemas.items.quantity - Schema item quantity.\n * @param {string}               props.schemas.items.time     - Schema item time.\n *\n * @param {number|null}          props.selectedSchemaId       - The id of the selected schema from the Redux State.\n * @param {string}               props.mode                   - The current ui mode from the Redux State.\n * @param {EventHandlerFunction} props.addSchema              - A function to add schema.\n * @param {EventHandlerFunction} props.updateSchema           - A function to update schema.\n * @param {function}             props.deleteSchema           - A function to delete schema.\n * @param {function}             props.selectSchema           - A function to select schema.\n * @param {function}             props.setMode                - A function to set current ui mode.\n */\nconst SchemasBoard = ({\n    schemas,\n    selectedSchemaId,\n    mode,\n    addSchema,\n    updateSchema,\n    deleteSchema,\n    selectSchema,\n    setMode\n}) => {\n    const isAdd    = mode === UiModes.ADD;\n    const isEdit   = mode === UiModes.EDIT;\n    const isDelete = mode === UiModes.DELETE;\n\n    let schemasBoard;\n\n    if (selectedSchemaId) {\n        if (isEdit) {\n            schemasBoard = <SchemaFormContainer\n                schema={schemas.find(schema => schema.id === selectedSchemaId)}\n                onSubmit={updateSchema}\n                onCancel={() => selectSchema(null)}\n            />;\n        } else if (isDelete) {\n            schemasBoard = <div className={css.board}>\n                {schemas.map((schema) => (\n                    <CardWithButtons\n                        key={schema.id}\n                        name={schema.name}\n                        content={schema.items.map((item) => <div key={item.id}>{item.name}</div>)}\n                        colorTheme='red'\n                        cardIsClicked={schema.id === selectedSchemaId}\n                        onClick={() => selectSchema(schema.id)}\n                        buttons={({\n                            first: {\n                                text: 'Delete',\n                                onClick: () => deleteSchema(schema.id)\n                            },\n                            second: {\n                                text: 'Cancel',\n                                onClick: () => selectSchema(null)\n                            }\n                        })}\n                    />\n                ))}\n            </div>;\n        } else {\n            schemasBoard = <Schema\n                schema={schemas.find(schema => schema.id === selectedSchemaId)}\n            />;\n        }\n    } else {\n        if (isAdd) {\n            schemasBoard = <SchemaFormContainer\n                schema={{items: []}}\n                onSubmit={addSchema}\n                onCancel={() => setMode(UiModes.SHOW)}\n            />;\n        } else {\n            let cardColorTheme = null;\n\n            if (isEdit) {\n                cardColorTheme = 'gold';\n            }\n            if (isDelete) {\n                cardColorTheme = 'red';\n            }\n\n            schemasBoard = <div className={css.board}>\n                {schemas.map((schema) => (\n                    <Card\n                        key={schema.id}\n                        name={schema.name}\n                        content={schema.items.map((item) => <div key={item.id}>{item.name}</div>)}\n                        colorTheme={cardColorTheme}\n                        onClick={() => selectSchema(schema.id)}\n                    />\n                ))}\n            </div>;\n        }\n    }\n\n    return schemasBoard;\n}\n\nexport default connect(\n    (state) => ({\n        schemas: state.schemas,\n        selectedSchemaId: state.ui.selectedSchemaId,\n        mode: state.ui.mode\n    }),\n    { addSchema, updateSchema, deleteSchema, selectSchema, setMode }\n)(SchemasBoard);","import React from 'react';\n\nimport css from './Content.module.css';\nimport SchemasBoardContainer from '../SchemasBoard/SchemasBoardContainer';\n\n/**\n * Component for rendering the main part of the app.\n * @param {Object}  props\n * @param {boolean} props.isSchemasClicked - If true, [SchemasBoardContainer]{@link SchemasBoardContainer} will be rendered.\n */\nconst Content = ({ isSchemasClicked }) => (\n    <div className={css.content}>\n        {isSchemasClicked && <SchemasBoardContainer />}\n    </div>\n);\n\nexport default Content;","import React, { useState } from 'react';\n\nimport './App.css';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport ContentContainer from './components/Content/ContentContainer';\n\nconst App = () => {\n    // TODO isSchemasClicked is set true while profile isn't available\n    const [isSchemasClicked, setIsSchemasClicked] = useState(true);\n\n    return (\n        <div className='app-wrapper'>\n            <HeaderContainer\n                isSchemasClicked={isSchemasClicked}\n                setIsSchemasClicked={setIsSchemasClicked}\n            />\n            <ContentContainer isSchemasClicked={isSchemasClicked} />\n        </div>\n    );\n}\n\nexport default App;","import { combineReducers } from \"redux\";\n\nimport profile from \"./profile\";\nimport schemas from \"./schemas\";\nimport ui from \"./ui\";\n\nconst reducer = combineReducers({\n    // profile,\n    schemas,\n    ui\n});\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\n\nimport configureStore from './redux/store/configureStore';\nimport API from './api';\n\n// TODO demo profile\nAPI.init('Profile 1');\n// TODO with demo schema\nif (!API.loadData().schemas.length) {\n  API.saveData({\"schemas\":[{\"id\":1,\"name\":\"Demo Schema 1\",\"description\":\"Demo Schema 1 Description\",\"items\":[{\"id\":1,\"name\":\"Item 1\",\"quantity\":\"Quantity 1\",\"time\":\"Time 1\"},{\"id\":2,\"name\":\"Item 2\",\"quantity\":\"Quantity 2\",\"time\":\"Time 2\"},{\"id\":3,\"name\":\"Item 3\",\"quantity\":\"Quantity 3\",\"time\":\"Time 3\"},{\"id\":4,\"name\":\"Item 4\",\"quantity\":\"Quantity 4\",\"time\":\"Time 4\"},{\"id\":5,\"name\":\"Item 5\",\"quantity\":\"Quantity 5\",\"time\":\"Time 5\"},{\"id\":6,\"name\":\"Item 6\",\"quantity\":\"Quantity 6\",\"time\":\"Time 6\"},{\"id\":7,\"name\":\"Item 7\",\"quantity\":\"Quantity 7\",\"time\":\"Time 7\"},{\"id\":8,\"name\":\"Item 8\",\"quantity\":\"Quantity 8\",\"time\":\"Time 8\"},{\"id\":10,\"name\":\"Item 10\",\"quantity\":\"Quantity 10\",\"time\":\"Time 10\"},{\"id\":11,\"name\":\"Item 11\",\"quantity\":\"Quantity 11\",\"time\":\"Time 11\"},{\"id\":12,\"name\":\"Item 12\",\"quantity\":\"Quantity 12\",\"time\":\"Time 12\"},{\"id\":13,\"name\":\"Item 13\",\"quantity\":\"Quantity 13\",\"time\":\"Time 13\"},{\"id\":14,\"name\":\"Item 14\",\"quantity\":\"Quantity 14\",\"time\":\"Time 14\"},{\"id\":15,\"name\":\"Item 15\",\"quantity\":\"Quantity 15\",\"time\":\"Time 15\"}]}]});\n}\n\nconst store = configureStore(API.loadData());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\n\nimport reducer from \"../reducers\";\n\nexport default function configureStore(preloadedState) {\n    const middlewares = [thunk, logger];\n    const middlewareEnhancer = applyMiddleware(...middlewares);\n\n    const storeEnhancers = [middlewareEnhancer];\n    const composeEnhancers = (\n        typeof window !== 'undefined' &&\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ) || compose;\n    const composedEnhancer = composeEnhancers(...storeEnhancers);\n\n    const store = createStore(\n        reducer,\n        preloadedState,\n        composedEnhancer\n    );\n\n    return store;\n}"],"sourceRoot":""}